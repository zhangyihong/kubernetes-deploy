#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

ensure_deploy_variables
create_kubeconfig
install_tiller


PORJECT_PATH=`pwd`
SUB_PROJECT_PATH="k8s"
THE_DEPLOY_NAME=$1

if [[ "${THE_DEPLOY_NAME}" == "" ]]; then
  echo -e "please input args ! \nuseage: deploy Project_name|ALL"
  exit 1
fi


deploy_sigle_game() {

    value_file=$1
    releases_name=$2
    helm upgrade --install \
    --wait \
    --namespace="$KUBE_NAMESPACE" \
    --tiller-namespace="default" \
    -f $value_file $releases_name \
    .
}

deploy_multiple_game() {
  sub_project=$1
  cd ${PORJECT_PATH}/${sub_project}/chart
  for value_file in `ls -f *values.yaml`; do

    releases_name=$(echo -n $value_file |awk -F"-" '{print $1}')
    echo $project_name,$value_file,$releases_name
    
    deploy_sigle_game ${value_file} ${releases_name}

  done
}

for sub_project in `ls -d ${SUB_PROJECT_PATH}/*`; do

  project_name=$(basename ${sub_project})
  if [[ "${THE_DEPLOY_NAME}" != "ALL" && "${THE_DEPLOY_NAME}" != "${project_name}"  ]]; then
     continue
  fi

  deploy_multiple_game ${sub_project}

done 

